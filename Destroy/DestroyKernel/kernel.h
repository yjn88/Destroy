#pragma once

#ifndef UNICODE
#error Please enable UNICODE for your compiler! VS: Project Properties -> General -> Character Set -> Use Unicode.
#endif

#include <Windows.h>

#define EXPORT_FUNC extern __declspec(dllexport) BOOL __stdcall

typedef struct _CONSOLE_INPUT_MODE
{
    BOOL _ENABLE_PROCESSED_INPUT;
    BOOL _ENABLE_LINE_INPUT;
    BOOL _ENABLE_ECHO_INPUT;
    BOOL _ENABLE_WINDOW_INPUT;
    BOOL _ENABLE_MOUSE_INPUT;
    BOOL _ENABLE_INSERT_MODE;
    BOOL _ENABLE_QUICK_EDIT_MODE;
    BOOL _ENABLE_EXTENDED_FLAGS;
    BOOL _ENABLE_AUTO_POSITION;
    BOOL _ENABLE_VIRTUAL_TERMINAL_INPUT;
} CONSOLE_INPUT_MODE;

typedef struct _CONSOLE_OUTPUT_MODE
{
    BOOL _ENABLE_PROCESSED_OUTPUT;
    BOOL _ENABLE_WRAP_AT_EOL_OUTPUT;
    BOOL _ENABLE_VIRTUAL_TERMINAL_PROCESSING;
    BOOL _DISABLE_NEWLINE_AUTO_RETURN;
    BOOL _ENABLE_LVB_GRID_WORLDWIDE;
} CONSOLE_OUTPUT_MODE;

#pragma region Window

EXPORT_FUNC GET_WINDOW_HANDLE(HWND * hConsoleWindow);

EXPORT_FUNC GET_WINDOW_POS(LONG* x, LONG* y);

EXPORT_FUNC SET_WINDOW_POS(int x, int y);

EXPORT_FUNC GET_WINDOW_SIZE(LONG * width, LONG * height);

EXPORT_FUNC GET_DESKTOP_SIZE(LONG * width, LONG * height);

EXPORT_FUNC GET_WINDOW_ALPHA(BYTE * alpha);

EXPORT_FUNC SET_WINDOW_ALPHA(BYTE alpha);

EXPORT_FUNC GET_WINDOW_IN_FOCUS(void);

EXPORT_FUNC SET_WINDOW_MENU(BOOL visible);

EXPORT_FUNC GET_CURSOR_POS(LONG * x, LONG * y);

EXPORT_FUNC SET_CURSOR_POS(int x, int y);

EXPORT_FUNC MESSAGE_BOX(WCHAR * text, WCHAR * caption, UINT type, int* choose);

EXPORT_FUNC MAXIMIZE_WINDOW(BOOL maximize);

EXPORT_FUNC SCREEN_TO_CLIENT(HWND hConsoleWindow, int* x, int* y);

#pragma endregion

#pragma region Console

EXPORT_FUNC GET_CONSOLE_HANDLE(HANDLE * handle, DWORD stdHandle);

EXPORT_FUNC CREAT_CONSOLE_BUFFER(HANDLE * hConsoleScreen);

EXPORT_FUNC SET_CONSOLE_ACTIVE_BUFFER(HANDLE hConsoleScreen);

EXPORT_FUNC GET_CONSOLE_MODE(HANDLE	hConsoleOutput, HANDLE hConsoleInput, CONSOLE_INPUT_MODE * cim, CONSOLE_OUTPUT_MODE * com);

EXPORT_FUNC SET_CONSOLE_MODE(HANDLE	hConsoleOutput, HANDLE hConsoleInput, CONSOLE_INPUT_MODE cim, CONSOLE_OUTPUT_MODE com);

EXPORT_FUNC GET_CONSOLE_FONT(HANDLE hConsoleOutput, BOOL * bold, SHORT * fontWidth, SHORT * fontHeight, WCHAR fontName[LF_FACESIZE]);

EXPORT_FUNC SET_CONSOLE_FONT(HANDLE hConsoleOutput, BOOL bold, SHORT fontWidth, SHORT fontHeight, wchar_t* fontName, rsize_t fontNameLength);

EXPORT_FUNC GET_CONSOLE_BUFFER_SIZE(HANDLE hConsoleOutput, SHORT * width, SHORT * height);

EXPORT_FUNC SET_CONSOLE_BUFFER_SIZE(HANDLE hConsoleOutput, SHORT width, SHORT height);

EXPORT_FUNC GET_CONSOLE_WINDOW_SIZE(HANDLE hConsoleOutput, SHORT * width, SHORT * height);

EXPORT_FUNC SET_CONSOLE_WINDOW_SIZE(HANDLE hConsoleOutput, SHORT width, SHORT height);

EXPORT_FUNC GET_CONSOLE_PALETTE(HANDLE hConsoleOutput, DWORD index, DWORD * r, DWORD * g, DWORD * b);

EXPORT_FUNC SET_CONSOLE_PALETTE(HANDLE hConsoleOutput, DWORD index, DWORD r, DWORD g, DWORD b);

EXPORT_FUNC GET_CONSOLE_TITLE(WCHAR title[MAX_PATH], DWORD * length);

EXPORT_FUNC SET_CONSOLE_TITLE(WCHAR * title);

EXPORT_FUNC GET_CONSOLE_CP(UINT * inputCP);

EXPORT_FUNC SET_CONSOLE_CP(UINT inputCP);

EXPORT_FUNC GET_CONSOLE_OUTPUT_CP(UINT * outputCP);

EXPORT_FUNC SET_CONSOLE_OUTPUT_CP(UINT outputCP);

EXPORT_FUNC GET_CONSOLE_ATTRIBUTE(HANDLE hConsoleOutput, WORD * foreColor, WORD * backColor);

EXPORT_FUNC SET_CONSOLE_ATTRIBUTE(HANDLE hConsoleOutput, WORD foreColor, WORD backColor);

EXPORT_FUNC GET_CONSOLE_CURSOR_INFO(HANDLE hConsoleOutput, BOOL * cursorVisible, DWORD * cursorSize);

EXPORT_FUNC SET_CONSOLE_CURSOR_INFO(HANDLE hConsoleOutput, BOOL cursorVisible, DWORD cursorSize);

EXPORT_FUNC GET_CONSOLE_CURSOR_POS(HANDLE hConsoleOutput, SHORT * x, SHORT * y);

EXPORT_FUNC SET_CONSOLE_CURSOR_POS(HANDLE hConsoleOutput, SHORT x, SHORT y);

EXPORT_FUNC READ_CONSOLE(HANDLE hConsoleInput, WCHAR * str, DWORD numberOfCharToRead, DWORD * read);

EXPORT_FUNC READ_CONSOLE_INPUT(HANDLE hConsoleInput, SHORT * mousePosX, SHORT * mousePosY);

EXPORT_FUNC FLUSH_CONSOLE_INPUT(HANDLE hConsoleInput);

EXPORT_FUNC WRITE_CONSOLE(HANDLE hConsoleOutput, wchar_t* charBuffer, DWORD numberOfCharsToWrite);

EXPORT_FUNC WRITE_CONSOLE_OUTPUT(HANDLE hConsoleOutput, CHAR_INFO * charInfos, SHORT x, SHORT y, SHORT width, SHORT height);

EXPORT_FUNC WRITE_CONSOLE_OUTPUT_CHAR(HANDLE hConsoleOutput, WCHAR * charBuffer, DWORD numberOfCharsToWrite, SHORT x, SHORT y);

EXPORT_FUNC WRITE_CONSOLE_OUTPUT_ATTRIBUTE(HANDLE hConsoleOutput, WORD * colors, DWORD numberOfColorsToWrite, SHORT x, SHORT y);

EXPORT_FUNC FILL_CONSOLE_OUTPUT_CHAR(HANDLE hConsoleOutput, WCHAR c, DWORD width, SHORT x, SHORT y);

EXPORT_FUNC FILL_CONSOLE_OUTPUT_ATTRIBUTE(HANDLE hConsoleOutput, WORD color, DWORD width, SHORT x, SHORT y);

EXPORT_FUNC GET_LARGEST_CONSOLE_WINDOW_SIZE(HANDLE hConsoleOutput, SHORT * width, SHORT * height);

EXPORT_FUNC SET_CONSOLE_CTRL_HANDLER(BOOL disable);

#pragma endregion

#pragma region Other

EXPORT_FUNC GET_KEY(int key);

EXPORT_FUNC START_TIMING(LONGLONG * freq, LONGLONG * start);

EXPORT_FUNC END_TIMING(LONGLONG freq, LONGLONG start, LONGLONG * timeCost);

EXPORT_FUNC SLEEP(DWORD milliSeconds);

EXPORT_FUNC CLOSE_HANDLE(HANDLE handle);

#pragma endregion